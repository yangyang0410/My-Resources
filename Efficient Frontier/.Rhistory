install.packages("quadprog")
install.packages('tidyverse')
library(quadprog)
library(tidyverse)
returns <- read_csv("portfolio.csv")
returns_matrix <- as.matrix(returns)
View(returns_matrix)
mean_returns <- colMeans(returns_matrix)
cov_matrix <- cov(returns_matrix)
n <- ncol(returns_matrix)
<- 2 * cov_matrix
Dmat <- 2 * cov_matrix
dvec <- rep(0, n)
Amat <- cbind(1, diag(n))
bvec <- c(1, rep(0, n))
meq <- 1
# Initialize variables to store results
portfolio_returns <- seq(from = min(mean_returns), to = max(mean_returns), by = 0.01)
portfolio_risk <- vector("numeric", length(portfolio_returns))
# Loop through different target returns and solve the quadratic program
for(i in 1:length(portfolio_returns)) {
target_return <- portfolio_returns[i]
Amat <- cbind(1, diag(n), mean_returns)
bvec <- c(1, rep(0, n), target_return)
meq <- 1
fit <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = meq)
portfolio_risk[i] <- sqrt(sum(fit$solution %*% cov_matrix %*% fit$solution))
}
# Loop through different target returns and solve the quadratic program
for(i in 1:length(portfolio_returns)) {
target_return <- portfolio_returns[i]
Amat <- cbind(1, diag(n), mean_returns)
bvec <- c(1, rep(0, n), target_return)
meq <- 1
fit <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = meq)
portfolio_risk[i] <- sqrt(sum(fit$solution %*% cov_matrix %*% fit$solution))
}
library(tidyverse)
library(quadprog)
df <- read_csv("portfolio.csv") %>%
mutate(across(everything(), ~ as.numeric(gsub("%", "", .)) / 100))
View(df)
# Calculate mean and covariance of monthly returns
mean_returns <- colMeans(df, na.rm = TRUE)
cov_matrix <- cov(df, use = "complete.obs")
# Number of assets
n <- ncol(df)
# Constraints for quadprog
Amat <- cbind(1, diag(n))
bvec <- c(1, rep(0, n))
meq <- 1
# Quadratic programming solution
sol <- solve.QP(Dmat = cov_matrix, dvec = rep(0, n),
Amat = t(Amat), bvec = bvec, meq = meq)
# Quadratic programming solution
sol <- solve.QP(Dmat = cov_matrix, dvec = rep(0, n),
Amat = t(Amat), bvec = bvec, meq = meq)
# Calculate mean and covariance of monthly returns
mean_returns <- colMeans(df, na.rm = TRUE)
cov_matrix <- cov(df, use = "complete.obs")
# Constraints for quadprog
Amat <- cbind(1, diag(n), t(rep(1, n)))
library(tidyverse)
library(quadprog)
df <- read_csv("portfolio.csv") %>%
mutate(across(everything(), ~ as.numeric(gsub("%", "", .)) / 100))
# Calculate mean and covariance of monthly returns
mean_returns <- colMeans(df, na.rm = TRUE)
cov_matrix <- cov(df, use = "complete.obs")
# Number of assets
n <- ncol(df)
# Constraints for quadprog
Amat <- cbind(1, diag(n), t(rep(1, n)))
# Constraints for quadprog
Amat <- matrix(c(1, rep(0, n)), ncol = 1)
diagm <- diag(1, ncol = n, nrow = n)
Amat <- cbind(Amat, diagm)
# Constraints for quadprog
Amat <- matrix(1, nrow = n, ncol = 1)
diagm <- diag(1, nrow = n, ncol = n)
Amat <- cbind(Amat, diagm)
bvec <- c(1, rep(0, n))
dvec <- rep(0, n)
# Solve the quadratic program
sol <- solve.QP(Dmat = cov_matrix, dvec = dvec,
Amat = t(Amat), bvec = bvec, meq = 1)
dvec <- rep(0, n)
Amat <- matrix(1, nrow = n, ncol = 1)
diagm <- diag(n)
Amat <- cbind(Amat, diagm)
bvec <- c(1, rep(0, n))
meq <- 1
# Solve the quadratic program
sol <- solve.QP(Dmat = cov_matrix, dvec = dvec, Amat = t(Amat), bvec = bvec, meq = meq)
# Number of assets and number of constraints
n <- ncol(df)
m <- n + 1
# Setting up for quadratic programming
Dmat <- cov_matrix
dvec <- rep(0, n)
# Create the Amat matrix and bvec vector
Amat <- matrix(1, nrow = 1, ncol = n)
Amat <- rbind(Amat, diag(n))
bvec <- c(1, rep(0, n))
# meq specifies the number of equality constraints (here, just the first constraint is an equality constraint)
meq <- 1
# Solve the quadratic programming problem
sol <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = meq)
library(tidyverse)
library(quadprog)
df <- read_csv("portfolio.csv") %>%
mutate(across(everything(), ~ as.numeric(gsub("%", "", .)) / 100))
# Calculate mean and covariance of monthly returns
mean_returns <- colMeans(df, na.rm = TRUE)
cov_matrix <- cov(df, use = "complete.obs")
# Number of assets and number of constraints
n <- ncol(df)
m <- n + 1
# Setting up for quadratic programming
Dmat <- cov_matrix
dvec <- rep(0, n)
# Create the Amat matrix and bvec vector
Amat <- matrix(1, nrow = 1, ncol = n)
Amat <- rbind(Amat, diag(n))
bvec <- c(1, rep(0, n))
# meq specifies the number of equality constraints (here, just the first constraint is an equality constraint)
meq <- 1
# Solve the quadratic programming problem
sol <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = meq)
# Initialize vectors to store Efficient Frontier points
port_returns <- seq(min(mean_returns), max(mean_returns), length.out = 100)
port_risk <- vector("numeric", length = length(port_returns))
# Loop through each target return level
for (i in seq_along(port_returns)) {
bvec[1] <- port_returns[i]  # Set the target return
# Solve for the portfolio that gives the minimum variance for the given return
sol <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = t(Amat), bvec = bvec, meq = meq)
# Calculate the portfolio risk (standard deviation)
port_risk[i] <- sqrt(sum(sol$solution %*% Dmat %*% sol$solution))
}
# Create a data frame for plotting
df_plot <- data.frame(Return = port_returns, Risk = port_risk)
# Generate the plot using ggplot2
ggplot(df_plot, aes(x = Risk, y = Return)) +
geom_line(color = "blue") +
labs(title = "Efficient Frontier",
x = "Portfolio Risk (Standard Deviation)",
y = "Portfolio Return") +
theme_minimal(base_family = 'Ubuntu')
# Create a data frame for plotting
df_plot <- data.frame(Return = port_returns, Risk = port_risk)
View(df_plot)
warnings()
# Generate the plot using ggplot2
ggplot(df_plot, aes(x = Risk, y = Return)) +
geom_line(color = "blue") +
labs(title = "Efficient Frontier",
x = "Portfolio Risk (Standard Deviation)",
y = "Portfolio Return") +
theme_bw(base_family = 'Ubuntu')
warnings()
# Generate the plot using ggplot2
ggplot(df_plot, aes(x = Risk, y = Return)) +
geom_line(color = "blue") +
labs(title = "Efficient Frontier",
x = "Portfolio Risk (Standard Deviation)",
y = "Portfolio Return") +
theme_minimal()
# Initialize vectors to store Efficient Frontier points
port_returns <- seq(min(mean_returns), max(mean_returns), length.out = 100)
port_risk <- vector("numeric", length = length(port_returns))
rf_rate <- 0.03
# Loop through each target return level
for (i in seq_along(port_returns)) {
# Set up an additional equality constraint for the expected portfolio return
target_return <- port_returns[i]
bvec <- c(1, target_return, rep(0, n - 1))
# Add an additional row to Amat for the expected return constraint
Amat2 <- rbind(matrix(1, nrow = 1, ncol = n),
matrix(mean_returns, nrow = 1, ncol = n),
diag(n))
# Solve the quadratic programming problem
sol <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = t(Amat2), bvec = bvec, meq = 2)
# Calculate the portfolio risk (standard deviation)
port_risk[i] <- sqrt(sum(sol$solution %*% Dmat %*% sol$solution))
}
# Initialize vectors to store Efficient Frontier points
port_returns <- seq(min(mean_returns), max(mean_returns), length.out = 100)
port_risk <- vector("numeric", length = length(port_returns))
# Loop through each target return level
for (i in seq_along(port_returns)) {
# Set up an additional equality constraint for the expected portfolio return
target_return <- port_returns[i]
# Add an additional row to Amat for the expected return constraint
Amat2 <- rbind(matrix(1, nrow = 1, ncol = n),
matrix(mean_returns, nrow = 1, ncol = n),
diag(n))
bvec2 <- c(1, target_return, rep(0, n))
# Solve the quadratic programming problem
sol <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = t(Amat2), bvec = bvec2, meq = 2)
# Calculate the portfolio risk (standard deviation)
port_risk[i] <- sqrt(sum(sol$solution %*% Dmat %*% sol$solution))
}
